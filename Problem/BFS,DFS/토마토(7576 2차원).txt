#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <cstring>
#include <queue>
using namespace std;


int map[1001][1001];
bool check[1001][1001];
int cnt[1001][1001];


int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0};


int maxx, maxy;

queue<pair<int, int>>q;

void bfs(int x,int y) {

	while (!q.empty()) { //덜익은토마토찾기
		int a = q.front().first;
		int b = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + a; //방문할수있는좌표
			int ny = dy[i] + b;

			if (nx >= 0 && ny >= 0 && nx <maxy && ny < maxx) {//방문 가능하고
				if (map[nx][ny] == 0 && check[nx][ny] == false) { //덜익은토마토고 미방문이면
					check[nx][ny] = true;
					cnt[nx][ny] = cnt[a][b] + 1; //최단거리가저장됨
					map[nx][ny] = 1;//방문후익은토마토
					q.push(make_pair(nx, ny));//익었으니 넣고 덜익은토마토를 찾으러감
				}
			}
			else
				continue;

		}
	}
}
int main() {
	cin >> maxx >> maxy;

	for (int i = 0; i < maxy; i++) {
		for (int j = 0; j < maxx; j++) {
			cin >> map[i][j];
			if (map[i][j] == 1) {//익은토마토면
				q.push(make_pair(i,j));//익은 토마토를넣음
				check[i][j] = true;//방문처리
			}
		}
	}
	for (int i = 0; i < maxy; i++) {
		for (int j = 0; j < maxx; j++) {
			if (check[i][j] == false && map[i][j] == 0) { //방문을 x 익지않은토마토면
				bfs(i, j);//방문
			}
		}
	}
	int tomato = 0;
	for (int i = 0; i < maxy; i++) {
		for (int j = 0; j < maxx; j++) {
		tomato=max(cnt[i][j], tomato);
		}
	} //토마토의 익은개수를 확인함
	
	
	bool ans = true;
	for (int i = 0; i < maxy; i++) {
		for (int j = 0; j < maxx; j++) {
			if (map[i][j] == 0) {// bfs를 다돌았는데 덜익은토마토가있으면 모두익지못한상태
				ans = false;
			}
		}
	}
	if (!ans)
		printf("-1\n");
	else
		printf("%d\n", tomato);

	return 0;
}