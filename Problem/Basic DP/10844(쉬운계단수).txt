끝수는 1~9까지 올수있다.
그럼
dp[1][1~9]=1이된다 (1,2,3,4,5,6,7,8,9)
만약 dp[2][1~9]? 2의자리끝수가 1~9가 오는경우에는
1 0 , 2 1 0 1, 3 2 1 2 , 2 3 4 3 , 3 4  5 4, 6 5 4 5, 7 6 5 6 , 6 7 8 7 ,7 8 9 8 , 8 9 
이 올수있다.
맨 앞과 맨 뒤를 뺴고 끝수+1 끝수 -1 과 올수있다.
점화식을 세우면 dp[n]=dp[n-1][L+1] or dp[n-1][L-1] 이다
그런데 맨앞과 맨뒤가 오는 경우는 제외해야하므로
if(L-1>0) 와  if(L+1<10) 조건을세워주어야한다.






#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <iostream>
using namespace std;
int dp[101][10];
int main() {
	int n;
	cin >> n;
	for (int i = 1; i <= 9; i++) {
		dp[1][i] = 1;
	} //맨처음 끝수는 0이나올수가없음

	//2번쨰부터는 0이나올수가있음
	for (int i = 2; i <= n; i++) {
		for (int j = 0; j <= 9; j++) {   
			if (j - 1 >0) //맨앞
				dp[i][j] += dp[i - 1][j - 1];
		
			if(j+1<10) //맨뒤 10이나오는것을방지
				dp[i][j] += dp[i - 1][j + 1];

		}
	}
	int sum = 0;
	for (int i = 0; i <= 9; i++) {
		sum += dp[n][i];
	}
	cout << sum << '\n';


}
 


