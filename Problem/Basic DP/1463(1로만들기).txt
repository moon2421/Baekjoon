X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다

먼저 메모제이션할 배열을 만듭니다 dp[1000001]
1은 1로만드는데 한번에 만들수있습니다 

2은 1로만드는데 2->1 or  2/2 로만들수있습니다 (최소비용이므로 둘중하나)

3은 1로만드드는데 3->2->1  or  3->1 이가능합니다 (최소비용이므로 3->1)

그럼 4는? 
4 ->2 ->1  , 4->3->2->1 , 4->3->1 로가능합니다

각 dp[i]에는 해당 수를 만드는 최소비용이 들어가있어야합니다
이를 통해 각 dp배열안에는 최소비용이들어있고 이를 통해 점화식을세울수있습니다
위 세조건에서 무조건 1은 뺼수있습니다.
그런데 나머지 두조건은 2와 3으로 나누어떨어질수있어야 해당이됩니다.






#include <cstdio>
#include <cstring>
#include <stack>
#include <queue>
#include <iostream>
using namespace std;
int dp[1000001];

int main() {
	int N;
	dp[0]=dp[1] = 0;
	cin >> N;
	for (int i = 2; i <= N; i++) {
		dp[i] = dp[i - 1] + 1;//1로뺸 최소비용
		if (i % 2 == 0) {
			dp[i] = min(dp[i], dp[i / 2] + 1);
		}
		if (i % 3 == 0) {
			dp[i] = min(dp[i], dp[i / 3] + 1);
		}

	}

	cout << dp[N] << '\n';
}