#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <queue>
#include <cstring>
#include <queue>
#include <utility>
#include <string>
#include <functional>

using namespace std;
int mod =1000000;

dp 배열내부값을 현재 자리수까지올수있는 암호수로 결정했다.
dp[1]일경우 한자리라 1이올수도있는데 여기서 0인경우는 0을출력해야된다
문제 입력예시로보면

25114
dp[1]=1 ->B

dp[2]일경우 =2 BE , Y
dp[3]일경우 = BEA (251) ,YA(251) 2개
dp[4]일경우 = 2511 (BEAA) 2511(YAA) 2511(YK) 2511(BEK) 총 4개가올수있다
이를 통해 점화식을 유추할수있는데
dp[3]일경우를 보면 이전과동일하게 2인경우밖에안된다. 왜냐하면 이전자리와 현재자리합이 51이나오기떄문에 이부분은 경우로 칠수없기떄문에
이전자리까지의 암호수를 더한다. (dp[i]+=dp[i-1]

dp[4]인경우는 이전자리까지포함하면 11 현재자리만했을떄 1이므로 둘다만족한다 
dp[2]의조합에있는것이 추가가되있으므로 dp[2]의 자릿수도더해주고 dp[3]의 자릿수도더해준다.



int dp[5001];//현재 자리까지의 암호수
char str[5001];
int main() {
	scanf("%s", str + 1);//1번쨰부터받음
	int len = strlen(str + 1);


	dp[0] = 1; //
	if (str[1] - '0' == 0) { //0을예외처리
		dp[1] = 0;
	}
	else {
		dp[1] = 1;
	}
	for (int i = 2; i <= len; i++) {
		int x = str[i] - '0';//현재자리를받음

		if (x > 0 && x < 10) { //한자리면
			dp[i] += dp[i - 1];//이전자리까지의 암호수
			dp[i] %= mod;
		}
		if (i == 1) {//첫번쨰자리면 
			continue;//두번쨰자리는 나올수가없으므로 건너뜀
		}
		

		//이전자리와 현재자리가 조합을이룰수있는지확인
		if (str[i - 1] - '0' == 0) {//건너뜀
			continue;
		}

		int a = (str[i - 1] - '0')*10 + str[i] - '0';
		//이전자리+현재자리 

		if (a >= 10 && a <= 26) {//조합이성립하면
			dp[i] = dp[i - 2] + dp[i]; //전전의 자릿수랑더함
			dp[i] %= mod;
		}


	}


	cout << dp[len] << '\n';

}

	
	

